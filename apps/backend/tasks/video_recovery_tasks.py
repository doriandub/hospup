"""
T√¢ches Celery pour la r√©cup√©ration automatique des vid√©os bloqu√©es
"""

from celery import current_task
from celery.schedules import crontab
from core.celery_app import celery_app
from services.video_recovery_service import video_recovery_service
import logging
import asyncio

logger = logging.getLogger(__name__)

@celery_app.task(bind=True)
def auto_recover_stuck_videos(self):
    """
    T√¢che p√©riodique pour r√©cup√©rer automatiquement les vid√©os bloqu√©es
    Ex√©cut√©e toutes les 2 minutes
    """
    try:
        logger.info("üîç V√©rification automatique des vid√©os bloqu√©es...")
        
        # Ex√©cuter la v√©rification de mani√®re synchrone
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            result = loop.run_until_complete(video_recovery_service.check_and_recover_stuck_videos())
        finally:
            loop.close()
        
        if result["stuck_videos_found"] > 0:
            logger.info(f"üéØ Auto-recovery: {result['recoveries_performed']}/{result['stuck_videos_found']} vid√©os r√©cup√©r√©es")
            
            if result.get("recovered_videos"):
                logger.info(f"üìπ Vid√©os relanc√©es: {', '.join(result['recovered_videos'])}")
        else:
            logger.debug("‚úÖ Auto-recovery: Aucune vid√©o bloqu√©e d√©tect√©e")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erreur dans auto_recover_stuck_videos: {e}")
        return {
            "status": "error",
            "error": str(e),
            "stuck_videos_found": 0,
            "recoveries_performed": 0
        }

@celery_app.task(bind=True)
def get_recovery_stats(self):
    """
    Retourne les statistiques du service de r√©cup√©ration automatique
    """
    try:
        return video_recovery_service.get_stats()
    except Exception as e:
        logger.error(f"‚ùå Erreur dans get_recovery_stats: {e}")
        return {"error": str(e)}

# Configuration des t√¢ches p√©riodiques
@celery_app.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):
    """Configuration des t√¢ches p√©riodiques"""
    
    # V√©rification toutes les 2 minutes
    sender.add_periodic_task(
        120.0,  # 2 minutes
        auto_recover_stuck_videos.s(),
        name='auto-recover-stuck-videos-every-2min'
    )
    
    logger.info("üîÑ T√¢che p√©riodique configur√©e: r√©cup√©ration automatique toutes les 2 minutes")