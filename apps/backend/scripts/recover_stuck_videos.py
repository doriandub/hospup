#!/usr/bin/env python3
"""
Script de r√©cup√©ration pour les vid√©os bloqu√©es en processing
Relance automatiquement le processing des vid√©os qui sont rest√©es bloqu√©es
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import logging

from core.database import get_db
from models.video import Video
from tasks.video_processing_tasks import process_uploaded_video

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def recover_stuck_videos(max_age_minutes: int = 10):
    """
    R√©cup√®re les vid√©os bloqu√©es en processing depuis plus de max_age_minutes
    
    Args:
        max_age_minutes: Age maximum en minutes avant de consid√©rer une vid√©o comme bloqu√©e
    """
    
    logger.info(f"üîç Recherche des vid√©os bloqu√©es depuis plus de {max_age_minutes} minutes...")
    
    # Obtenir une session de base de donn√©es
    db = next(get_db())
    
    try:
        # Calculer la date limite
        cutoff_time = datetime.utcnow() - timedelta(minutes=max_age_minutes)
        
        # Trouver les vid√©os bloqu√©es en processing
        stuck_videos = db.query(Video).filter(
            Video.status == "processing",
            Video.created_at < cutoff_time
        ).all()
        
        if not stuck_videos:
            logger.info("‚úÖ Aucune vid√©o bloqu√©e trouv√©e")
            return
        
        logger.info(f"üö® {len(stuck_videos)} vid√©o(s) bloqu√©e(s) trouv√©e(s):")
        
        for video in stuck_videos:
            age_minutes = (datetime.utcnow() - video.created_at).total_seconds() / 60
            logger.info(f"   - {video.title} (ID: {video.id}) - Bloqu√©e depuis {age_minutes:.1f} minutes")
        
        # Demander confirmation
        response = input(f"\n‚ùì Voulez-vous relancer le processing pour ces {len(stuck_videos)} vid√©o(s) ? (y/N): ")
        
        if response.lower() not in ['y', 'yes', 'oui']:
            logger.info("‚ùå Op√©ration annul√©e")
            return
        
        # Relancer le processing pour chaque vid√©o bloqu√©e
        success_count = 0
        error_count = 0
        
        for video in stuck_videos:
            try:
                logger.info(f"üîÑ Relancement du processing pour {video.title}...")
                
                # Extraire la cl√© S3 de l'URL vid√©o
                video_url = video.video_url
                if video_url.startswith("s3://"):
                    # Format: s3://bucket_name/path/to/file
                    s3_key = "/".join(video_url.split("/")[3:])
                else:
                    # Fallback: essayer de construire la cl√© S3 √† partir du nom de fichier
                    s3_key = f"properties/{video.property_id}/videos/{video.title}"
                
                # Lancer la t√¢che Celery
                task = process_uploaded_video.delay(str(video.id), s3_key)
                
                # Mettre √† jour le task ID
                video.generation_job_id = task.id
                db.commit()
                
                logger.info(f"‚úÖ T√¢che relanc√©e: {task.id}")
                success_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå Erreur pour {video.title}: {e}")
                error_count += 1
        
        logger.info(f"\nüìä R√©sum√©:")
        logger.info(f"   ‚úÖ {success_count} t√¢che(s) relanc√©e(s)")
        logger.info(f"   ‚ùå {error_count} erreur(s)")
        
        if success_count > 0:
            logger.info(f"\nüí° Surveillez les logs Celery pour suivre le progress:")
            logger.info(f"   tail -f logs/celery.log")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
    
    finally:
        db.close()

def show_processing_status():
    """
    Affiche le statut actuel du processing vid√©o
    """
    logger.info("üìä Statut actuel du processing vid√©o:")
    
    db = next(get_db())
    
    try:
        # Compter par statut
        from sqlalchemy import func
        status_counts = db.query(
            Video.status, 
            func.count(Video.id)
        ).group_by(Video.status).all()
        
        total_videos = sum(count for _, count in status_counts)
        
        logger.info(f"   üì∫ Total des vid√©os: {total_videos}")
        for status, count in status_counts:
            logger.info(f"   üè∑Ô∏è  {status}: {count}")
        
        # D√©tails des vid√©os en processing
        processing_videos = db.query(Video).filter(Video.status == "processing").all()
        
        if processing_videos:
            logger.info(f"\nüîÑ Vid√©os actuellement en processing:")
            for video in processing_videos:
                age_minutes = (datetime.utcnow() - video.created_at).total_seconds() / 60
                logger.info(f"   - {video.title} (depuis {age_minutes:.1f}min)")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
    
    finally:
        db.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="R√©cup√©ration des vid√©os bloqu√©es en processing")
    parser.add_argument("--status", action="store_true", help="Afficher seulement le statut")
    parser.add_argument("--max-age", type=int, default=10, help="Age maximum en minutes (d√©faut: 10)")
    parser.add_argument("--force", action="store_true", help="Forcer sans demander confirmation")
    
    args = parser.parse_args()
    
    if args.status:
        show_processing_status()
    else:
        if args.force:
            # Mode forc√© pour automation
            logger.info("ü§ñ Mode forc√© activ√©")
            # TODO: impl√©menter le mode forc√©
        
        recover_stuck_videos(args.max_age)