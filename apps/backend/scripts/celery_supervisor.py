#!/usr/bin/env python3
"""
Superviseur Celery - Surveillance et red√©marrage automatique des workers
R√©sout les probl√®mes de crashes SIGSEGV de mani√®re permanente
"""

import os
import sys
import signal
import subprocess
import time
import logging
import psutil
from pathlib import Path
from datetime import datetime, timedelta
import json

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/tmp/celery_supervisor.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class CelerySupervisor:
    def __init__(self):
        self.worker_process = None
        self.beat_process = None
        self.restart_count = 0
        self.last_restart = None
        self.max_restarts_per_hour = 10
        
        # Configuration optimis√©e pour √©viter SIGSEGV
        self.worker_config = {
            # Threading et processus
            'concurrency': 1,
            'pool': 'solo',  # Solo pool √©vite les forks probl√©matiques
            'loglevel': 'info',
            
            # Limites de s√©curit√©
            'max_tasks_per_child': 10,  # Red√©marrer fr√©quemment
            'max_memory_per_child': 256000,  # 256MB limite m√©moire
            
            # Timeouts
            'task_time_limit': 900,  # 15 minutes max par t√¢che
            'task_soft_time_limit': 780,  # 13 minutes soft
        }
        
        # Variables d'environnement pour stabilit√©
        self.env_vars = {
            # Optimisations OpenCV
            'OPENCV_IO_MAX_IMAGE_PIXELS': str(10**8),
            'OPENCV_FFMPEG_CAPTURE_OPTIONS': 'rtsp_transport;udp',
            
            # Optimisations FFmpeg  
            'FFMPEG_HIDE_BANNER': '1',
            'AV_LOG_FORCE_NOCOLOR': '1',
            
            # Python optimizations
            'PYTHONUNBUFFERED': '1',
            'PYTHONIOENCODING': 'utf-8',
            'MALLOC_ARENA_MAX': '2',  # Limiter malloc arenas
            
            # Threading
            'OMP_NUM_THREADS': '1',
            'MKL_NUM_THREADS': '1',
            'OPENBLAS_NUM_THREADS': '1',
        }
        
        # Signaux pour arr√™t propre
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        """Arr√™t propre du superviseur"""
        logger.info(f"üõë Signal {signum} re√ßu, arr√™t du superviseur...")
        self.stop_all_processes()
        sys.exit(0)
    
    def check_restart_limits(self):
        """V√©rifie si on peut red√©marrer (limite anti-spam)"""
        now = datetime.now()
        
        if self.last_restart:
            # Reset compteur si plus d'une heure
            if now - self.last_restart > timedelta(hours=1):
                self.restart_count = 0
                
            # Trop de red√©marrages dans l'heure
            if self.restart_count >= self.max_restarts_per_hour:
                logger.error(f"‚ùå Trop de red√©marrages ({self.restart_count}) dans la derni√®re heure")
                return False
                
        return True
        
    def get_worker_cmd(self):
        """Commande worker optimis√©e contre SIGSEGV"""
        base_cmd = [
            sys.executable, '-m', 'celery',
            '-A', 'core.celery_app',
            'worker',
            f"--loglevel={self.worker_config['loglevel']}",
            f"--concurrency={self.worker_config['concurrency']}",
            f"--pool={self.worker_config['pool']}",
            f"--max-tasks-per-child={self.worker_config['max_tasks_per_child']}",
            f"--max-memory-per-child={self.worker_config['max_memory_per_child']}",
            f"--time-limit={self.worker_config['task_time_limit']}",
            f"--soft-time-limit={self.worker_config['task_soft_time_limit']}",
            '--without-gossip',
            '--without-mingle', 
            '--without-heartbeat',
            '--hostname=worker-stable@%h'
        ]
        return base_cmd
        
    def get_beat_cmd(self):
        """Commande beat pour t√¢ches p√©riodiques"""
        return [
            sys.executable, '-m', 'celery',
            '-A', 'core.celery_app',
            'beat',
            '--loglevel=info',
            '--pidfile=/tmp/celerybeat.pid'
        ]
    
    def start_worker(self):
        """D√©marre le worker Celery avec config optimis√©e"""
        if not self.check_restart_limits():
            logger.error("‚ùå Limite de red√©marrages atteinte, arr√™t du superviseur")
            return False
            
        try:
            # Environnement optimis√©
            env = os.environ.copy()
            env.update(self.env_vars)
            
            cmd = self.get_worker_cmd()
            logger.info(f"üöÄ D√©marrage worker: {' '.join(cmd)}")
            
            self.worker_process = subprocess.Popen(
                cmd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            # Statistiques de red√©marrage
            self.restart_count += 1
            self.last_restart = datetime.now()
            
            logger.info(f"‚úÖ Worker d√©marr√© (PID: {self.worker_process.pid}, restart #{self.restart_count})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage worker: {e}")
            return False
            
    def start_beat(self):
        """D√©marre Celery Beat pour les t√¢ches p√©riodiques"""
        try:
            env = os.environ.copy()
            env.update(self.env_vars)
            
            cmd = self.get_beat_cmd()
            logger.info(f"üìÖ D√©marrage beat: {' '.join(cmd)}")
            
            self.beat_process = subprocess.Popen(
                cmd,
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            logger.info(f"‚úÖ Beat d√©marr√© (PID: {self.beat_process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©marrage beat: {e}")
            return False
    
    def is_process_healthy(self, process):
        """V√©rifie si le processus est en vie et sain"""
        if not process:
            return False
            
        try:
            # V√©rifier si le processus existe
            if process.poll() is not None:
                return False
                
            # V√©rifier via psutil pour plus d'infos
            proc = psutil.Process(process.pid)
            if not proc.is_running():
                return False
                
            # V√©rifier que ce n'est pas un zombie
            if proc.status() == psutil.STATUS_ZOMBIE:
                return False
                
            return True
            
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            return False
            
    def get_process_stats(self, process):
        """Statistiques du processus pour monitoring"""
        if not process:
            return {}
            
        try:
            proc = psutil.Process(process.pid)
            return {
                'pid': process.pid,
                'status': proc.status(),
                'cpu_percent': proc.cpu_percent(),
                'memory_mb': proc.memory_info().rss / 1024 / 1024,
                'num_threads': proc.num_threads(),
                'create_time': datetime.fromtimestamp(proc.create_time())
            }
        except:
            return {'pid': process.pid, 'error': 'stats_unavailable'}
    
    def stop_process(self, process, name):
        """Arr√™t propre d'un processus"""
        if not process:
            return
            
        try:
            logger.info(f"üõë Arr√™t de {name} (PID: {process.pid})")
            
            # SIGTERM d'abord
            process.terminate()
            
            # Attendre 10 secondes
            try:
                process.wait(timeout=10)
                logger.info(f"‚úÖ {name} arr√™t√© proprement")
                return
            except subprocess.TimeoutExpired:
                pass
            
            # SIGKILL si n√©cessaire
            logger.warning(f"‚ö†Ô∏è {name} ne r√©pond pas, force kill...")
            process.kill()
            process.wait(timeout=5)
            logger.info(f"üíÄ {name} tu√© de force")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur arr√™t {name}: {e}")
            
    def stop_all_processes(self):
        """Arr√™te tous les processus"""
        if self.worker_process:
            self.stop_process(self.worker_process, "Worker")
            self.worker_process = None
            
        if self.beat_process:
            self.stop_process(self.beat_process, "Beat")
            self.beat_process = None
    
    def monitor_loop(self):
        """Boucle principale de surveillance"""
        logger.info("üéØ D√©marrage superviseur Celery anti-crash")
        
        # D√©marrage initial
        if not self.start_worker():
            logger.error("‚ùå Impossible de d√©marrer le worker initial")
            return
            
        if not self.start_beat():
            logger.warning("‚ö†Ô∏è Impossible de d√©marrer beat, continuons avec worker seul")
        
        # Boucle de surveillance
        while True:
            try:
                # V√©rifier worker
                if not self.is_process_healthy(self.worker_process):
                    logger.warning("üí• Worker mort ou zombie d√©tect√©")
                    
                    if self.worker_process:
                        exit_code = self.worker_process.poll()
                        if exit_code == -11:  # SIGSEGV
                            logger.error("üß® Crash SIGSEGV d√©tect√©, red√©marrage avec config renforc√©e")
                        else:
                            logger.error(f"üíÄ Worker mort avec code: {exit_code}")
                    
                    self.stop_process(self.worker_process, "Worker")
                    self.worker_process = None
                    
                    if not self.start_worker():
                        logger.error("‚ùå Impossible de red√©marrer worker, arr√™t superviseur")
                        break
                
                # V√©rifier beat 
                if self.beat_process and not self.is_process_healthy(self.beat_process):
                    logger.warning("üí• Beat mort d√©tect√©, red√©marrage...")
                    self.stop_process(self.beat_process, "Beat")
                    self.beat_process = None
                    self.start_beat()
                
                # Stats p√©riodiques (toutes les 2 minutes)
                if int(time.time()) % 120 == 0:
                    worker_stats = self.get_process_stats(self.worker_process)
                    logger.info(f"üìä Worker stats: {worker_stats}")
                
                time.sleep(5)  # V√©rification toutes les 5 secondes
                
            except KeyboardInterrupt:
                logger.info("üõë Interruption clavier, arr√™t...")
                break
            except Exception as e:
                logger.error(f"‚ùå Erreur boucle surveillance: {e}")
                time.sleep(10)
        
        # Nettoyage final
        self.stop_all_processes()
        logger.info("üèÅ Superviseur arr√™t√©")

def main():
    """Point d'entr√©e"""
    # Changer vers le r√©pertoire backend
    script_dir = Path(__file__).parent.parent
    os.chdir(script_dir)
    
    # V√©rifier l'environnement virtuel
    if not os.path.exists('venv/bin/activate'):
        logger.error("‚ùå Environment virtuel non trouv√©")
        sys.exit(1)
    
    # Activer l'environnement virtuel
    venv_python = str(Path('venv/bin/python').absolute())
    if not os.path.exists(venv_python):
        logger.error("‚ùå Python venv non trouv√©")
        sys.exit(1)
    
    # Changer l'ex√©cutable Python pour celui du venv
    sys.executable = venv_python
    
    logger.info("üéØ Initialisation du superviseur Celery...")
    supervisor = CelerySupervisor()
    supervisor.monitor_loop()

if __name__ == "__main__":
    main()