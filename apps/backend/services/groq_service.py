"""
Groq AI service for text generation
"""
import logging
import os
from typing import Optional
from groq import Groq

logger = logging.getLogger(__name__)

class GroqService:
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize Groq service
        
        Args:
            api_key: Groq API key. If None, will try to use environment variable
        """
        # Get API key from environment or parameter
        self.api_key = api_key or os.getenv("GROQ_API_KEY")
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è No Groq API key configured - using fallback descriptions")
            self.client = None
        else:
            try:
                self.client = Groq(api_key=self.api_key)
                logger.info("‚úÖ Groq service initialized successfully")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Groq: {e}")
                self.client = None
        
        # Initialize prompt templates
        self.prompt_templates = self._get_prompt_templates()

    def generate_instagram_description(
        self, 
        property_obj, 
        user_description: str = "",
        prompt_template: str = "default"
    ) -> str:
        """
        Generate Instagram description for hotel video using complete property info
        
        Args:
            property_obj: Property object with all details (name, description, city, etc.)
            user_description: Original user description/intent for this specific video
            prompt_template: Template to use for description generation (default, luxury, trendy, etc.)
            
        Returns:
            Generated Instagram description
        """
        if not self.client:
            return self._generate_fallback_description(property_obj.name, property_obj.city, property_obj.country, property_obj)
        
        try:
            # Create prompt for Instagram description using selected template
            prompt = self._create_comprehensive_prompt(property_obj, user_description, prompt_template)
            
            # Call Groq API
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                model="llama-3.1-8b-instant",  # Fast and free model
                temperature=0.7,
                max_tokens=150,
            )
            
            description = chat_completion.choices[0].message.content.strip()
            logger.info(f"ü§ñ Generated Groq description for {property_obj.name}")
            return description
            
        except Exception as e:
            logger.error(f"‚ùå Groq API error: {e}")
            return self._generate_fallback_description(property_obj.name, property_obj.city, property_obj.country, property_obj)
    
    def _create_comprehensive_prompt(self, property_obj, user_description: str, template_name: str = "default") -> str:
        """Create comprehensive prompt using ALL property information and selected template"""
        
        # Extract all available property information
        property_info = f"""INFORMATIONS COMPL√àTES DE L'√âTABLISSEMENT:
- Nom: {property_obj.name}
- Ville: {property_obj.city or 'Non sp√©cifi√©'}
- Pays: {property_obj.country or 'France'}
- Type d'√©tablissement: {property_obj.property_type or 'Hotel'}"""

        # Add property description if available
        if property_obj.description:
            property_info += f"\n- Description de l'√©tablissement: {property_obj.description}"
        
        # Add address if available
        if property_obj.address:
            property_info += f"\n- Adresse: {property_obj.address}"
        
        # Add contact info if available
        if property_obj.website_url:
            property_info += f"\n- Site web: {property_obj.website_url}"
        
        if property_obj.phone:
            property_info += f"\n- T√©l√©phone: {property_obj.phone}"
        
        if property_obj.instagram_handle:
            property_info += f"\n- Instagram: {property_obj.instagram_handle}"

        # Add user's specific video message/intent
        video_intent = ""
        if user_description:
            video_intent = f"\n\nMESSAGE SP√âCIFIQUE DE LA VID√âO:\n- Ce que l'utilisateur veut transmettre: {user_description}"

        # Get the selected template
        template = self.prompt_templates.get(template_name, self.prompt_templates["default"])
        
        # Replace placeholders in the template
        city_tag = f"#{property_obj.city.lower().replace(' ', '').replace('-', '')}" if property_obj.city else "#voyage"
        
        prompt = template.format(
            property_info=property_info,
            video_intent=video_intent,
            city_tag=city_tag,
            city=property_obj.city or "Unknown",
            country=property_obj.country or "France"
        )

        return prompt
    
    def _create_prompt(self, property_name: str, city: str, country: str, user_description: str) -> str:
        """Legacy prompt method - kept for compatibility"""
        
        base_prompt = f"""G√©n√®re une description Instagram engageante en fran√ßais pour cette vid√©o d'h√¥tel.

Informations:
- Nom de l'√©tablissement: {property_name}
- Ville: {city}
- Pays: {country}"""

        if user_description:
            base_prompt += f"\n- Description originale: {user_description}"

        base_prompt += f"""

Instructions:
- Cr√©e une description accrocheuse de 2-3 phrases
- Inclus des hashtags pertinents (#hotel, #travel, #{city.lower().replace(' ', '').replace('-', '') if city else 'voyage'})
- Ton enthousiaste et inspirant
- Maximum 150 caract√®res
- Ne pas mentionner de prix
- Utilise des emojis appropri√©s

Exemple de format:
‚ú® [Description inspirante] 
üìç {city}, {country}
#travel #hotel #{city.lower().replace(' ', '').replace('-', '') if city else 'voyage'}

G√©n√®re uniquement la description, sans commentaires suppl√©mentaires:"""

        return base_prompt
    
    def _generate_fallback_description(self, property_name: str, city: str, country: str, property_obj=None) -> str:
        """Generate intelligent fallback description using property data when Groq is not available"""
        
        # If we have the full property object, use more detailed fallback
        if property_obj:
            return self._generate_smart_fallback(property_obj)
        
        # Basic fallback
        city_tag = f"#{city.lower().replace(' ', '').replace('-', '')}" if city else "#voyage"
        country_tag = f"#{country.lower().replace(' ', '').replace('-', '')}" if country else ""
        
        fallback = f"‚ú® D√©couvrez {property_name} ! Un s√©jour d'exception vous attend\n"
        fallback += f"üìç {city}, {country}\n" 
        fallback += f"#travel #hotel #luxury {city_tag} {country_tag} #vacation #hospitality"
        
        logger.info(f"üîÑ Used basic fallback description for {property_name}")
        return fallback
    
    def _generate_smart_fallback(self, property_obj) -> str:
        """Generate intelligent fallback using all property information"""
        
        # Base description with property type adaptation
        if property_obj.property_type and 'charme' in property_obj.property_type.lower():
            base_text = f"‚ú® {property_obj.name}, votre refuge de charme"
        elif property_obj.property_type and 'chateau' in property_obj.property_type.lower():
            base_text = f"üè∞ {property_obj.name}, majestueux ch√¢teau-h√¥tel"
        elif property_obj.property_type and 'spa' in property_obj.property_type.lower():
            base_text = f"üßò‚Äç‚ôÄÔ∏è {property_obj.name}, votre oasis bien-√™tre"
        else:
            base_text = f"‚ú® D√©couvrez {property_obj.name}"
        
        # Add context from description if available
        if property_obj.description:
            if 'mer' in property_obj.description.lower() or 'oc√©an' in property_obj.description.lower():
                base_text += " face √† la mer üåä"
            elif 'montagne' in property_obj.description.lower():
                base_text += " en montagne üèîÔ∏è"
            elif 'gastronomique' in property_obj.description.lower():
                base_text += " et sa table gastronomique üçΩÔ∏è"
            elif 'spa' in property_obj.description.lower():
                base_text += " avec spa üßò‚Äç‚ôÄÔ∏è"
        
        # Location
        location = f"üìç {property_obj.city}, {property_obj.country}\n"
        
        # Smart hashtags based on city and property type
        city_tag = f"#{property_obj.city.lower().replace(' ', '').replace('-', '')}" if property_obj.city else "#france"
        
        # Type-specific hashtags
        if property_obj.property_type:
            if 'charme' in property_obj.property_type.lower():
                type_tags = "#charme #boutique"
            elif 'chateau' in property_obj.property_type.lower():
                type_tags = "#chateau #luxury #heritage"
            elif 'spa' in property_obj.property_type.lower():
                type_tags = "#spa #wellness #detente"
            else:
                type_tags = "#luxury"
        else:
            type_tags = "#luxury"
        
        hashtags = f"#travel #hotel {type_tags} {city_tag} #vacation #hospitality"
        
        smart_fallback = f"{base_text}\n{location}{hashtags}"
        
        logger.info(f"üß† Used smart fallback description for {property_obj.name}")
        return smart_fallback
    
    def _get_prompt_templates(self) -> dict:
        """Define different prompt templates for various styles"""
        
        return {
            "default": """Tu es un expert en marketing h√¥telier et en cr√©ation de contenu Instagram. G√©n√®re une description Instagram engageante en fran√ßais pour une vid√©o promotionnelle.

{property_info}{video_intent}

INSTRUCTIONS:
- Utilise TOUTES les informations de l'√©tablissement pour cr√©er une description personnalis√©e et authentique
- Int√®gre le message sp√©cifique que l'utilisateur veut transmettre dans cette vid√©o
- Cr√©e une description accrocheuse de 2-3 phrases maximum
- Utilise un ton enthousiaste et inspirant
- Inclus des emojis pertinents
- Maximum 150 caract√®res
- Ne mentionne jamais de prix
- Inclus des hashtags pertinents: #hotel #travel {city_tag}

FORMAT ATTENDU:
‚ú® [Description personnalis√©e bas√©e sur l'√©tablissement et le message] 
üìç {city}, {country}
#hashtags

G√©n√®re uniquement la description finale, sans commentaires:""",

            "luxury": """Tu es un expert en marketing h√¥telier sp√©cialis√© dans le luxe. G√©n√®re une description Instagram sophistiqu√©e et √©l√©gante pour une vid√©o promotionnelle d'un √©tablissement de prestige.

{property_info}{video_intent}

INSTRUCTIONS:
- Emphasise l'excellence, le raffinement et l'exclusivit√©
- Utilise un vocabulaire sophistiqu√© et premium
- Mets en avant l'exp√©rience unique et les services haut de gamme
- Ton √©l√©gant et inspirant, sans √™tre ostentatoire
- Inclus des emojis premium (üíé, ‚ú®, ü•Ç, üëë)
- Maximum 150 caract√®res
- Hashtags luxe: #luxury #prestige #excellence #sophistication {city_tag}

FORMAT ATTENDU:
üíé [Description raffin√©e mettant en avant l'exclusivit√©]
üìç {city}, {country}
#luxury #prestige {city_tag}

G√©n√®re uniquement la description finale, sans commentaires:""",

            "trendy": """Tu es un influenceur expert en tendances et destinations branch√©es. G√©n√®re une description Instagram moderne et captivante pour une vid√©o d'h√¥tel tendance.

{property_info}{video_intent}

INSTRUCTIONS:
- Utilise un langage moderne, dynamique et accrocheur
- Mets l'accent sur l'aspect photog√©nique et Instagram-worthy
- Cr√©√© un sentiment d'urgence et d'exclusivit√© ("must-visit", "incontournable")
- Ton enjou√© et √©nergique
- Utilise des emojis tendance (üî•, üí´, ‚ö°, üéØ, üì∏)
- Maximum 150 caract√®res
- Hashtags branch√©s: #instaworthy #trendy #mustsee #vibes {city_tag}

FORMAT ATTENDU:
üî• [Description accrocheuse et moderne]
üìç {city}, {country}
#vibes #instaworthy {city_tag}

G√©n√®re uniquement la description finale, sans commentaires:""",

            "family": """Tu es un expert en marketing familial et vacances en famille. G√©n√®re une description Instagram chaleureuse pour une vid√©o d'√©tablissement family-friendly.

{property_info}{video_intent}

INSTRUCTIONS:
- Mets l'accent sur l'accueil familial, la convivialit√© et les souvenirs
- Emphasise les activit√©s et services pour tous les √¢ges
- Utilise un ton chaleureux et bienveillant
- √âvoque la cr√©ation de souvenirs inoubliables en famille
- Inclus des emojis familiaux (üë®‚Äçüë©‚Äçüëß‚Äçüë¶, üéâ, ‚ù§Ô∏è, üèñÔ∏è, üéà)
- Maximum 150 caract√®res
- Hashtags famille: #family #familytime #memories #kids {city_tag}

FORMAT ATTENDU:
‚ù§Ô∏è [Description chaleureuse ax√©e famille]
üìç {city}, {country}
#family #memories {city_tag}

G√©n√®re uniquement la description finale, sans commentaires:""",

            "romantic": """Tu es un expert en escapades romantiques et lunes de miel. G√©n√®re une description Instagram romantique et enchanteur pour une vid√©o d'√©tablissement couple.

{property_info}{video_intent}

INSTRUCTIONS:
- Cr√©√© une atmosph√®re romantique et intime
- Mets l'accent sur les moments √† deux, la complicit√© et l'amour
- Utilise un vocabulaire tendre et √©vocateur
- √âvoque l'√©vasion romantique et les moments magiques
- Inclus des emojis romantiques (üíï, üåπ, ü•Ç, üåÖ, üíë)
- Maximum 150 caract√®res
- Hashtags romantiques: #romantic #couple #love #honeymoon {city_tag}

FORMAT ATTENDU:
üíï [Description romantique et √©vocatrice]
üìç {city}, {country}
#romantic #love {city_tag}

G√©n√®re uniquement la description finale, sans commentaires:"""
        }
    
    def get_available_templates(self) -> list:
        """Return list of available prompt templates"""
        return list(self.prompt_templates.keys())

# Global instance
groq_service = GroqService()